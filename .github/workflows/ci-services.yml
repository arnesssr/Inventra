name: Services CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'
      - '.github/workflows/ci-services.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Service Changes
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      packages: ${{ steps.changes.outputs.packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'
            api-gateway:
              - 'services/api-gateway/**'
            auth-service:
              - 'services/auth-service/**'
            product-service:
              - 'services/product-service/**'
            inventory-service:
              - 'services/inventory-service/**'
            order-service:
              - 'services/order-service/**'
            supplier-service:
              - 'services/supplier-service/**'
            notification-service:
              - 'services/notification-service/**'
            audit-service:
              - 'services/audit-service/**'
            file-service:
              - 'services/file-service/**'
            analytics-service:
              - 'services/analytics-service/**'
          list-files: json
      - name: Set services output
        id: set-services
        run: |
          SERVICES=$(echo '${{ steps.changes.outputs.changes }}' | jq -r '.[] | select(. != "packages")' | jq -s .)
          echo "services=$SERVICES" >> $GITHUB_OUTPUT

  test-packages:
    name: Test Shared Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build:packages
      
      - name: Test packages
        run: npm run test:packages

  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    needs: [detect-changes, test-packages]
    if: always() && needs.detect-changes.outputs.services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build packages
        run: npm run build:packages
      
      - name: Install service dependencies
        run: cd services/${{ matrix.service }} && npm ci
      
      - name: Lint service
        run: cd services/${{ matrix.service }} && npm run lint
      
      - name: Type check
        run: cd services/${{ matrix.service }} && npm run type-check
      
      - name: Run unit tests
        run: cd services/${{ matrix.service }} && npm run test -- --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./services/${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-services]
    if: always() && (needs.test-services.result == 'success' || needs.test-services.result == 'skipped')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: |
          cd infrastructure/databases
          npm run migrate:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Run integration tests
        run: cd testing/integration && npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-services, integration-tests]
    if: always() && (needs.test-services.result == 'success' || needs.test-services.result == 'skipped') && needs.integration-tests.result == 'success'
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          file: infrastructure/docker/services/${{ matrix.service }}.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
      
      - name: Deploy to staging
        run: |
          kubectl apply -k infrastructure/kubernetes/overlays/staging
          kubectl rollout status deployment -n inventra-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
      
      - name: Deploy to production
        run: |
          kubectl apply -k infrastructure/kubernetes/overlays/production
          kubectl rollout status deployment -n inventra-production